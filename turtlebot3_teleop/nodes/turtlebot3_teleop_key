#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from std_msgs.msg import Float32
from std_msgs.msg import String
from geometry_msgs.msg import Twist
import sys, select, os
import threading
import time
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios

BURGER_MAX_LIN_VEL = 0.22
BURGER_MAX_ANG_VEL = 2.84

LIN_VEL_STEP_SIZE = 0.22
ANG_VEL_STEP_SIZE = 1

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity (Burger : ~ 0.22)
a/d : increase/decrease angular velocity (Burger : ~ 2.84)

s : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""
data_box ="" #voice_sound data
distance_box="" #sonar_dist data
distance_box = Float32()
def callback(data): #save voice_sound data to data_box
      global data_box
      data_box = data.data
	
def callbackk(data): #save /sonar_dist data to distance_box
      global distance_box
      distance_box = data.data


def listener(): #add subscriber
      global distance_box
      global data_box
      rospy.Subscriber("voice_sound", String, callback)
      rospy.Subscriber("/sonar_dist", Float32, callbackk)
      rospy.spin()

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s" % (target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    return vel

def checkAngularLimitVelocity(vel):
    vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    return vel

def main():
    
    global distance_box
    global data_box
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    turtlebot3_model = rospy.get_param("model", "burger")

    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0

    try:
	print msg
	while(1):
	    key = str(data_box)
            if ((distance_box < 20) & (key != 'x')) :
                key='s'
	    if key == "w" :
	        target_linear_vel = 0.2
	        target_angular_vel =0
	        print vels(target_linear_vel,target_angular_vel)
	    elif key == 'x' :
	        target_linear_vel = -0.2
	        target_angular_vel =0
	        print vels(target_linear_vel,target_angular_vel)
	    elif key == 'a' :
	        target_angular_vel = 1
	        target_linear_vel = 0.2
	        print vels(target_linear_vel,target_angular_vel)
	    elif key == 'd' :
	        target_angular_vel = -1
	        target_linear_vel = 0.2
	        print vels(target_linear_vel,target_angular_vel)
	    elif key == 's' :
	        target_linear_vel   = 0.0
	        control_linear_vel  = 0.0
	        target_angular_vel  = 0.0
	        control_angular_vel = 0.0
	        print vels(target_linear_vel, target_angular_vel)
	    else:
	        if (key == 'q | \x03'):
                    thread.join()
	            break
	    twist = Twist()

	    control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))
	    twist.linear.x = control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0

	    control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
	    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = control_angular_vel
	    
	    pub.publish(twist)
            rospy.sleep(0.1)


    except:
	print e

    finally:
	twist = Twist()
	twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
	twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
	pub.publish(twist)
	


    if os.name != 'nt':
	termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
if __name__=="__main__":
	rospy.init_node('turtlebot3_teleop')
	thread=threading.Thread(target=main)
	thread.start()
	listener()



